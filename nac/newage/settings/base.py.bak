"""
Django settings for newage project.

Generated by 'django-admin startproject' using Django 1.8.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""
from __future__ import print_function

import distutils as _distutils
from distutils import util as _util
import os as _os
import sys as _sys

from unipath import Path as _Path


def get_env_setting(setting, default=None):
    """ Get the environment setting or return exception """
    x = _os.environ.get(setting, default)
    if x is not None:
        return x
    else:
        error_msg = "Set the %s env variable" % setting
        import django.core.exceptions
        raise django.core.exceptions.ImproperlyConfigured(error_msg)

# ######### PATH CONFIGURATION
# Absolute filesystem path to the Django project directory:
BASE_DIR = _Path(__file__).ancestor(3)

# Absolute filesystem path to the top-level project folder:
PROJECT_DIR = BASE_DIR.parent

# Site name:
SITE_NAME = BASE_DIR.name

# Add our project to our pythonpath, this way we don't need to type our project
# name in our dotted import paths:
_sys.path.insert(0, BASE_DIR)

# ######### END PATH CONFIGURATION

MEDIA_URL = '/media/'
# os.path.join() starts at the latest absolute path - so remove leading slash
# from MEDIA_URL before joining
MEDIA_ROOT = _Path(PROJECT_DIR, MEDIA_URL.strip(_os.sep))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Use debug webpack server? (if not, will assume prod webpack build)
DEBUG_WEBPACK = False

# ######### END DEBUG CONFIGURATION

# ######### MANAGER CONFIGURATION
# See: https://docs.djangoproject.com/en/dev/ref/settings/#admins
ADMINS = (
    ('NewAge Warning', 'client-newage.warning@alliancesoftware.com.au'),
)

# See: https://docs.djangoproject.com/en/dev/ref/settings/#managers
MANAGERS = ADMINS
# ######### END MANAGER CONFIGURATION

ALLOWED_HOSTS = []

SITE_ID=3
# Application definition

INSTALLED_APPS = (
    # order matters!
    # static files/templates/commands all go to the first app listed that matches
    # however model dependencies need to be constructed in order

    'newage',

    'django.contrib.contenttypes',
    'django.contrib.sites',

    'authtools',
    'django.contrib.auth',


    # project specific
    'audit',
    'caravans',
    'customers',
    'crm',
    'dealerships',
    'emails',
    'help',
    'marketing',
    # 'manufacturing',
    'orders',
    'portal',
    'production',
    'quality',
    'reports',
    'salesforce',
    'schedule',
    'warranty',
    'mps',

    # 3rd party
    'allianceutils',
    'apptemplates',
    'ckeditor',
    'ckeditor_uploader',
    'compat',
    'compressor',
    'django_admin_bootstrapped',    # Must come before django.contrib.admin
    'django_extensions',
    'django_filters',
    'django_select2',
    'django_tables2',
    'filebrowser',
    'floppyforms',
    'form_utils',
    'hijack',
    'import_export',
    'rest_framework',
    'rules.apps.AutodiscoverRulesConfig',
    'webpack_loader',

    # core django
    'django.contrib.admin',
    'django.contrib.humanize',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


)

DAB_FIELD_RENDERER = 'django_admin_bootstrapped.renderers.BootstrapFieldRenderer'

MIDDLEWARE  = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    #'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'allianceutils.middleware.CurrentUserMiddleware',
)

ROOT_URLCONF = 'newage.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [
        #     '/templates/admin/'
        # ],
        # 'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',

                'newage.context.newage_context',
            ],
            'debug': DEBUG,
            'loaders': [
                'apptemplates.Loader',
                'django.template.loaders.app_directories.Loader',
                # 'django.template.loaders.filesystem.Loader',
            ],
        },
    },
]

# Not needed for prod, but is needed for loading test data in CI
SERIALIZATION_MODULES = {
    'json':         'allianceutils.serializers.json_orminheritancefix',
    'json_ordered': 'allianceutils.serializers.json_orminheritancefix',
}

# Date formats
FORMAT_DATE = '%d/%m/%Y'
FORMAT_DATE_JS = 'dd/MM/yyyy'
FORMAT_DATE_DATEPICKER_JS = 'dd/mm/yy'  # Specific format for jQuery-ui datepicker
DATE_FORMAT = 'm/d/Y'  # Django internal format

FORMAT_DATE_DATEPICKER_DASH_FMT_JS = 'dd-mm-yy'
FORMAT_DATE_DATEPICKER_DASH_FMT = '%d-%m-%Y'

FORMAT_DATE_ISO = '%Y-%m-%d'
FORMAT_DATE_ISO_JS = 'yyyy-MM-dd'
FORMAT_DATE_MONTH_ISO = '%Y-%m'
FORMAT_DATE_MONTH_ISO_JS = 'yyyy-MM'

FORMAT_DATE_MONTH = '%B %Y'
FORMAT_DATE_MONTH_JS = 'MMMM yyyy'
FORMAT_DATE_MONTH_SHORT = '%b %Y'
FORMAT_DATE_MONTH_SHORT_JS = 'MMM yyyy'

FORMAT_DATE_WEEKDAY = "%a %d-%m-%Y"
FORMAT_DATE_WEEKDAY_JS = "EEE dd-MM-yyyy"

FORMAT_DATE_ONEWORD = '%Y%m%d'
FORMAT_DATE_ONEWORD_JS = 'yyyyMMdd'
SHORT_DATE_FORMAT = 'ymd'  # Django internal format
FORMAT_DATETIME_ONEWORD = '%Y%m%d%H%M%S'
FORMAT_DATETIME_ONEWORD_JS = 'yyyyMMddHHmmss'
SHORT_DATETIME_FORMAT = 'ymdHis'  # Django internal format

FORMAT_DATETIME = '%Y-%m-%d %H:%M:%S'
FORMAT_DATETIME_JS = 'yyyy-MM-dd HH:mm:ss'
DATETIME_FORMAT = 'Y-m-d H:i:s'  # Django internal format

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'simple': {
            'format': '[%(asctime)s] %(levelname)s %(message)s',
            'datefmt': FORMAT_DATETIME,
        },
        'simple_request': {
            'format': '[%(asctime)s] %(levelname)s %(status_code)s %(message)s',
            'datefmt': FORMAT_DATETIME,
        },
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s %(module)s %(process)d %(thread)d [%(name)s:%(lineno)s] %(message)s',
            'datefmt': FORMAT_DATETIME,
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue'
        },
    },
    'handlers': {
        'null': {
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
        'file_debug': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': PROJECT_DIR + '/logs/debug.log',
            'maxBytes': 10 * 1000 * 1000,
            'backupCount': 1,
            'formatter': 'verbose',
        },
        'file_egm': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': PROJECT_DIR + '/logs/egm.log',
            'maxBytes': 10 * 1000 * 1000,
            'backupCount': 1,
            'formatter': 'verbose',
        },
        'file_egm_script': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': PROJECT_DIR + '/logs/egm_script.log',
            'maxBytes': 10 * 1000 * 1000,
            'backupCount': 1,
            'formatter': 'simple',
        },
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': PROJECT_DIR + '/logs/error.log',
            'maxBytes': 10 * 1000 * 1000,
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'file_request': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': PROJECT_DIR + "/logs/request.log",
            'maxBytes': 100 * 1000 * 1000,
            'backupCount': 4,
            'formatter': 'simple_request',
        },

        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
        },
    },
    'loggers': {
        'debug': {
            'handlers': ['file_debug'],
            'level': 'DEBUG',
            'propagate': False,
        },

        'django': {
            'handlers': ['file_error'],
            'level': 'ERROR',
            'propagate': False,
        },

        'egm': {
            'handlers': ['file_egm'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'egm_script': {
            'handlers': ['file_egm_script'],
            'level': 'DEBUG',
            'propagate': False,
        },

        'net': {
            'handlers': [
                'mail_admins',
                'file_request',
            ],
            'level': 'INFO',
            'propagate': True,
        },
        # Currently Rackspace is triggering this every minute with their monitoring. Disable email notifications.
        # EDIT: nginx should only be directing known hosts here
        # 'django.security.DisallowedHost': {
        #     'handlers': ['file_request'],
        #     'propagate': False,
        # },

        # django.servers.basehttp.WSGIRequestHandler.log_message is hardcoded to always mix everything into stderr;
        # for CI we use runserver_plus which uses werkzeug and normal python logging, to control console output
        'werkzeug': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

WSGI_APPLICATION = 'wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.postgresql_psycopg2',
        # 'NAME': ...,
        # 'OPTIONS': ...,
    }
}

# Mandrill Email SETUP
MANDRILL_TEST_MODE      = DEBUG
MANDRILL_API_KEY        = 'U1Dj5i0rxKGbpnxlW00ZoA'
MANDRILL_API_TEST_KEY   = 'TH5ltSSalLrJxFqEwBj9qw'
MANDRILL_SENDER_DOMAIN   = 'orderazzi.net'

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-au'

TIME_ZONE = 'Australia/Melbourne'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_ROOT = PROJECT_DIR.child('assets').norm()

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    # _Path(PROJECT_DIR, 'frontend/static'),
    ('dist/prod', _Path(PROJECT_DIR, 'frontend/dist/prod')),
)

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)

WEBPACK_LOADER = {
    'DEFAULT': {
        'BUNDLE_DIR_NAME': 'dist/prod/',
        'STATS_FILE': _Path(PROJECT_DIR, 'frontend/dist/prod/webpack-stats.json'),
        'LOADER_CLASS': 'allianceutils.webpack.TimestampWebpackLoader',
    },
}

# - We don't use django-compress' minifier since webpack production build has already done that for us
# - For bower components we should be including the minified bower file
# - django module JS files are small enough to not worry about minification
# => Concatenating & gzipping the output is the only thing django-compress needs to do
COMPRESS_JS_FILTERS = []
COMPRESS_STORAGE = 'compressor.storage.GzipCompressorFileStorage'


AUTH_USER_MODEL = 'authtools.User'

AUTHENTICATION_BACKENDS = (
    'rules.permissions.ObjectPermissionBackend',
    'django.contrib.auth.backends.ModelBackend',
)

LOGIN_URL = '/newage/login/'
LOGIN_REDIRECT_URL = '/home/'

# DRF
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # we prioritise BasicAuthentication so that we can distinguish logged out (401) vs permission denied (403)
        # http response codes; our code doesn't actually use http basic authentication
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        # default to requiring authentication & a role
        # you can override this by setting the permission_classes to AllowAny in the view
        'rest_framework.permissions.IsAuthenticated',
        'allianceutils.api.permissions.SimpleDjangoObjectPermissions',
    ),
}

# Hijack
HIJACK_ALLOW_GET_REQUESTS = False
HIJACK_AUTHORIZE_STAFF = False
HIJACK_USE_BOOTSTRAP = True

# CKEditor
CKEDITOR_IMAGE_BACKEND = 'pillow'
CKEDITOR_UPLOAD_PATH = 'ckeditor/uploads/'
CKEDITOR_BROWSE_SHOW_DIRS = True
CKEDITOR_ALLOW_NONIMAGE_FILES = False
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': [
            ["Format", "Bold", "Italic", "Underline", "Strike", "SpellChecker"],
            ['NumberedList', 'BulletedList', "Indent", "Outdent", 'JustifyLeft', 'JustifyCenter', 'JustifyRight',
             'JustifyBlock'],
            ["Image", "Table", "Link", "Unlink", "Anchor", "SectionLink", "Subscript", "Superscript"],
            ['Undo', 'Redo'], ["Source"],
            ["Maximize"]
        ],
    },
}

# permanent field
PERMANENT_FIELD = 'deleted'

# filebrowser
FILEBROWSER_DIRECTORY = 'uploads/marketing/'
FILEBROWSER_SEARCH_TRAVERSE = True
FILEBROWSER_SHOW_IN_DASHBOARD = False

# django-filter

# Disable all help text unless explicitly include
FILTERS_HELP_TEXT_EXCLUDE = False
FILTERS_HELP_TEXT_FILTER = False

# ---------------------------------------------------------------------------------------------------------------------
# "MOCK_DATES=1 ./manage.py runserver" to run server with system clock mocked out for testing
LOCAL_TEST_RUN = False
if _util.strtobool(get_env_setting('MOCK_DATES', '0')):
    _start_time = '2016-09-01T10:00:00Z'
    import freezegun as _freezegun
    _freezegun.freeze_time(_start_time, tick=True).start()
    print("Mocked out system clock to start at %s\n" % _start_time, file=_sys.stderr)
    LOCAL_TEST_RUN = True


DISABLE_PDF = False
# DISABLE_PDF=1 ./manage.py runserver" to run server with PDF generation replaced with HTML
if _util.strtobool(get_env_setting('DISABLE_PDF', '0')):
    DISABLE_PDF = True
    print('Replacing PDF output with HTML', file=_sys.stderr)

# ---------------------------------------------------------------------------------------------------------------------
# Apps that will have audit trails
AUDIT_APPS = (
    'newage',
    'authtools',
    'caravans',
    'customers',
    'crm',
    'dealerships',
    'emails',
    'help',
    'orders',
    'portal',
    'production',
    'quality',
    'schedule',
    'warranty',
)

# HTML styling
BODY_ENV_CLASS = 'env-unknown'

# Caravans-specific business logic

# Specifies how many days prior to the build start date should we order parts
ORDERS_PARTS_DEADLINE_LEAD_DAYS = 56

# How many days before the build date should the drawing be completed by
BUILD_DRAWING_DEADLINE_DAYS = 6 * 7

# How many working days before the build date should the build start
BUILD_START_DEADLINE_WORKINGDAYS = 3

# When searching working days we stop searching if we encounter SCHEDULE_WORKING_SEARCH_WINDOW
# consecutive non-working days
SCHEDULE_WORKING_SEARCH_WINDOW = 28

# On the schedule screen, load this many days worth of past/future data
SCHEDULE_LOAD_PAST_DAYS = 30
SCHEDULE_LOAD_FUTURE_DAYS = 60

# This is the name of the company as it will appear in the application
COMPANY_NAME = 'New Age Caravans'

# Maximum depth of SKUCategories (including Top node)
# Lookup function are guaranteed to go that deep and no further.
MAX_CATEGORY_DEPTH = 3

# Batch email configuration
BATCH_EMAIL_FROM = 'donotreply@newagecaravans.com.au'
BATCH_EMAIL_FROM_NAME = 'Automatic Email'

# Chassis number configuration
CHASSIS_NUMBER_START = 10000

# Email address to receive errors from Salesforce updates
SALESFORCE_ERROR_EMAIL = 'it@newagecaravans.com.au'
WKHTMLTOPDF_PATH=''
SALESFORCE_REQUEST_TIMEOUT = 300
MAINTENANCE_MODE = get_env_setting('MAINTENANCE_MODE', 0)
